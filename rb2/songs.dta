(conpatch
   (name "2951257")
   (artist "music")
   (master TRUE)
   (context 1026)
   (song
     (name        "songs/conpatch/conpatch")
     (tracks
        ((drum (0 1))
         (bass 2)
         (guitar (3))
         (vocals (4))
        )
     )
     (pans        (  0.0  -1.0  1.0   -1.0  1.0   0.0 ))
     (vols        ( -1.0  -3.5 -3.5   -5.0 -5.0  -4.0 ))
     (cores       (  -1    -1   -1     -1   -1    -1  ))
     (drum_solo
        (seqs (kick.cue snare.cue tom1.cue tom2.cue crash.cue))
     )
     (drum_freestyle
        (seqs (kick.cue snare.cue hat.cue ride.cue crash.cue))
     )
     (midi_file "songs/conpatch/conpatch.mid")
     (hopo_threshold 90)
   )
   (song_scroll_speed 2300)
   (bank sfx/tambourine_bank.milo)
   (anim_tempo kTempoSlow)
   (preview 2 4)
   (rank
      (drum 1)
      (guitar 1)
      (bass 1)
      (vocals 1)
      (band 1)
   )
   (genre trash)
   (decade the00s)
   (vocal_gender male)

   (format 5)
   (version 3)
   (fake TRUE)   
   ; harmonix i really see why you moved away from dta. what the fuck were you thinking when you made such a vulnerable scripting language. 
   (downloaded
      {do
         {unless $patched
            ;start of init vars
            {set $trackspeed 1.0}
            {set $speedmod 1.0}
            {set $hwlength 1.0} ; awesomeness actually
            {set $scrbloom TRUE}
            {set $camerashake TRUE}
            {set $fxdof TRUE}
            {set $scrnoise TRUE}
            {set $mbblend TRUE}
            {set $emulatefps 24}
            {set $trkmuting TRUE}
            {set $whammypb TRUE}
            {set $misssounds TRUE}
            {set $fcring TRUE}
            {set_elem {find $syscfg sound slider} 1 -96}
            {set_elem {find $syscfg tour default_difficulty} 1 kDifficultyExpert}
            ;start of modified screens/panels
            {delete coop_track_panel}
            {new
               TrackPanel
               coop_track_panel
               (file track/trackpanel.milo)
               (enter
                  {unless {exists fc_bass_callback}
                     {new Object fc_bass_callback ;remove FC groove on bass miss/pass
                        (hit
                           {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
                           {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
                           {$this check_fc}
                           {set [num_gems_hit] {'+' [num_gems_hit] 1}}
                           {set [num_gems_combo] {'+' [num_gems_combo] 1}}
                        )
                        (miss
                           {unless {! $bass_firstnote}
                           {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}}}
                        )
                        (pass
                           {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
                           {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
                           {set [num_gems_pass] {'+' [num_gems_pass] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}}
                        )
                        (check_fc
                           {$this check_missed}
                           {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find bass} find streak_meter} star_deploy}}}
                        )
                        (check_missed
                           {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}}}
                        )
                        (num_gems_hit 0)
                        (num_gems_combo 0)
                        (num_gems_miss 0)
                        (num_gems_pass 0)
                     }
                     {new Object fc_guitar_callback ;remove FC groove on guitar miss/pass
                        (hit
                           {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
                           {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
                           {$this check_fc}
                           {set [num_gems_hit] {'+' [num_gems_hit] 1}}
                           {set [num_gems_combo] {'+' [num_gems_combo] 1}}
                           {unless $legacybass {if {&& {> [num_gems_combo] 29} {! $guitar_groove_active}} {set $guitar_groove_active TRUE} {{{{get_track_panel} find guitar} find BassSuperStreak_ON.trig} trigger}}}
                        )
                        (miss
                           {unless {! $guitar_firstnote}
                           {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}}}
                        )
                        (pass
                           {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
                           {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
                           {set [num_gems_pass] {'+' [num_gems_pass] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}}
                        )
                        (check_fc
                           {$this check_missed}
                           {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find guitar} find streak_meter} star_deploy}}}
                        )
                        (check_missed
                           {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}}}
                           {unless $legacybass {if {&& {< [num_gems_combo] 29} $guitar_groove_active} {set $guitar_groove_active FALSE} {{{{get_track_panel} find guitar} find BassSuperStreak_OFF.trig} trigger}}}
                        )
                        (num_gems_hit 0)
                        (num_gems_combo 0)
                        (num_gems_miss 0)
                        (num_gems_pass 0)
                     }
                     {new Object fc_drum_callback ;remove FC groove on drum miss/pass
                        (hit
                           {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
                           {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
                           {$this check_fc}
                           {set [num_gems_hit] {'+' [num_gems_hit] 1}}
                           {set [num_gems_combo] {'+' [num_gems_combo] 1}}
                           {unless $legacybass  {if {&& {> [num_gems_combo] 29} {! $drum_groove_active}} {set $drum_groove_active TRUE} {{{{get_track_panel} find drum} find BassSuperStreak_ON.trig} trigger}}}
                        )
                        (miss
                           {unless {! $drum_firstnote}
                           {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}}}
                        )
                        (pass
                           {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
                           {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
                           {set [num_gems_pass] {'+' [num_gems_pass] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}}
                        )
                        (check_fc
                           {$this check_missed}
                           {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find drum} find streak_meter} star_deploy}}}
                        )
                        (check_missed
                           {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}}}
                           {unless $legacybass {if {&& {< [num_gems_combo] 29} $drum_groove_active} {set $drum_groove_active FALSE} {{{{get_track_panel} find drum} find BassSuperStreak_OFF.trig} trigger}}}
                        )
                        (num_gems_hit 0)
                        (num_gems_combo 0)
                        (num_gems_miss 0)
                        (num_gems_pass 0)
                     }
                  }
                  {game add_sink $this}
                  {set_tp_vars}
                  {set_graphics}
                  {beatmatch set_kick_autoplay $autokick}
                  {$this
                     set_showing
                     {if_else
                        {'||'
                           $skip_intro
                           {gamemode get is_drum_trainer}
                           {gamemode get is_practice}}
                        {gamemode get show_track}
                        FALSE}})
               (exit
                  {game remove_sink $this})
               (unison_hit)
               (unison_miss)
               (set_track_out)
               (set_track_in)
               (animate_track
                  ($start $end $period $units))
               (animate_track_out)
               (animate_track_out_fast)
               (animate_track_in_fast)
               (finish_load
                  {$this set_showing FALSE}
                  {$this set_track_out})
               (intro_start
                  {$this reset}
                  {$this
                     set_showing
                     {gamemode get show_track}}
                  {$this set_track_in})
               (intro_skip
                  {$this reset}
                  {$this
                     set_showing
                     {gamemode get show_track}}
                  {$this set_track_out}
                  {$this play_intro})
               (on_reset
                  {beatmatch
                     foreach_active_player
                     $m
                     {$m on_new_track}
                     {{$m track}
                        init
                        {$m track}}}
                  {{$this loaded_dir}
                     reset})
               (on_extend
                  {reset_fc_vars}
                  {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
                     {switch {$player instrument}
                        (bass {$player add_sink fc_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
                        (guitar {$player add_sink fc_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
                        (drum {$player add_sink fc_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
                     }
                  }
                  {$this play_intro}
                  {if
                     {&&
                        {exists gamemode}
                        {gamemode get play_track_intro_sfx}}
                     {synth play track_beg.cue}}
                     {set_song_speed})}
            {delete h2h_track_panel}
            {new
               TrackPanel
               h2h_track_panel
               (file
                  {if_else
                     {==
                        {{game get_participant_config 0}
                           get_track_sym}
                        vocals}
                     track/trackpanel_h2h_vocals.milo
                     track/trackpanel_h2h.milo})
               (enter
                  {unless {exists fc_h2h_0_callback}
                     {new Object fc_h2h_0_callback ;remove FC groove on h2h track 0 miss/pass
                        (hit
                           {if {! $h2h_0_firstnote} {set $h2h_0_firstnote TRUE}}
                           {if {! $h2h_0_milosong} {set $h2h_0_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
                           {$this check_fc}
                           {set [num_gems_hit] {'+' [num_gems_hit] 1}}
                           {set [num_gems_combo] {'+' [num_gems_combo] 1}}
                           {unless {== {{game get_participant_config 0} get_track_sym} bass}
                              {unless $legacybass  {if {&& {> [num_gems_combo] 29} {! $h2h_0_groove_active}} {set $h2h_0_groove_active TRUE} {{{{get_track_panel} find track_0} find BassSuperStreak_ON.trig} trigger}}}
                           }
                        )
                        (miss
                           {unless {! $h2h_0_firstnote}
                           {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find track_0} find streak_meter} star_deploy_stop}}}
                        )
                        (pass
                           {if {! $h2h_0_firstnote} {set $h2h_0_firstnote TRUE}}
                           {if {! $h2h_0_milosong} {set $h2h_0_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
                           {set [num_gems_pass] {'+' [num_gems_pass] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find track_0} find streak_meter} star_deploy_stop}}
                        )
                        (check_fc
                           {$this check_missed}
                           {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find track_0} find streak_meter} star_deploy}}}
                        )
                        (check_missed
                           {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find track_0} find streak_meter} star_deploy_stop}}}
                           {unless $legacybass {if {&& {< [num_gems_combo] 29} $h2h_0_groove_active} {set $h2h_0_groove_active FALSE} {{{{get_track_panel} find track_0} find BassSuperStreak_OFF.trig} trigger}}}
                        )
                        (num_gems_hit 0)
                        (num_gems_combo 0)
                        (num_gems_miss 0)
                        (num_gems_pass 0)
                     }
                     {new Object fc_h2h_1_callback ;remove FC groove on h2h track 1 miss/pass
                        (hit
                           {if {! $h2h_1_firstnote} {set $h2h_1_firstnote TRUE}}
                           {if {! $h2h_1_milosong} {set $h2h_1_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
                           {$this check_fc}
                           {set [num_gems_hit] {'+' [num_gems_hit] 1}}
                           {set [num_gems_combo] {'+' [num_gems_combo] 1}}
                           {unless {== {{game get_participant_config 0} get_track_sym} bass}
                              {unless $legacybass  {if {&& {> [num_gems_combo] 29} {! $h2h_1_groove_active}} {set $h2h_1_groove_active TRUE} {{{{get_track_panel} find track_1} find BassSuperStreak_ON.trig} trigger}}}
                           }
                        )
                        (miss
                           {unless {! $h2h_0_firstnote}
                           {set [num_gems_miss] {'+' [num_gems_miss] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find track_1} find streak_meter} star_deploy_stop}}}
                        )
                        (pass
                           {if {! $h2h_1_firstnote} {set $h2h_1_firstnote TRUE}}
                           {if {! $h2h_1_milosong} {set $h2h_1_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
                           {set [num_gems_pass] {'+' [num_gems_pass] 1}}
                           {set [num_gems_combo] 0}
                           {$this check_missed}
                           {if $fcring
                              {{{{get_track_panel} find track_1} find streak_meter} star_deploy_stop}}
                        )
                        (check_fc
                           {$this check_missed}
                           {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find track_1} find streak_meter} star_deploy}}}
                        )
                        (check_missed
                           {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
                              {if $fcring
                                 {{{{get_track_panel} find track_1} find streak_meter} star_deploy_stop}}}
                           {unless $legacybass {if {&& {< [num_gems_combo] 29} $h2h_1_groove_active} {set $h2h_1_groove_active FALSE} {{{{get_track_panel} find track_1} find BassSuperStreak_OFF.trig} trigger}}}
                        )
                        (num_gems_hit 0)
                        (num_gems_combo 0)
                        (num_gems_miss 0)
                        (num_gems_pass 0)
                     }
                  }
                  {game add_sink $this}
                  {set_tp_vars}
                  {set_graphics}
                  {beatmatch set_kick_autoplay $autokick}
                  {$this
                     set_showing
                     {if_else
                        {'||'
                           $skip_intro
                           {gamemode get is_drum_trainer}
                           {gamemode get is_practice}}
                        {gamemode get show_track}
                        FALSE}})
               (exit
                  {game remove_sink $this})
               (unison_hit)
               (unison_miss)
               (set_track_out)
               (set_track_in)
               (animate_track
                  ($start $end $period $units))
               (animate_track_out)
               (animate_track_out_fast)
               (animate_track_in_fast)
               (finish_load
                  {$this set_showing FALSE}
                  {$this set_track_out})
               (intro_start
                  {$this reset}
                  {$this
                     set_showing
                     {gamemode get show_track}}
                  {$this set_track_in})
               (intro_skip
                  {$this reset}
                  {$this
                     set_showing
                     {gamemode get show_track}}
                  {$this set_track_out}
                  {$this play_intro})
               (on_reset
                  {beatmatch
                     foreach_active_player
                     $m
                     {$m on_new_track}
                     {{$m track}
                        init
                        {$m track}}}
                  {{$this loaded_dir}
                     reset})
               (on_extend
                  {reset_fc_vars}
                  {unless {== {{game get_participant_config 0} get_track_sym} vocals}
                     {beatmatch foreach_active_player $player
                        {if_else {== {$player track} track0}
                           {$player add_sink fc_h2h_0_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)}
                           {$player add_sink fc_h2h_1_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)}
                        }
                     }
                  }
                  {$this play_intro}
                  {if
                     {&&
                        {exists gamemode}
                        {gamemode get play_track_intro_sfx}}
                     {synth play track_beg.cue}}
                     {set_song_speed})}
            {delete community_panel}
            {new
               SessionPanel
               community_panel
               MAIN_SUBSCREEN_PANEL_HANDLER
               (webcode_done FALSE)
               (webcode
                  "")
               (ok_with_leaderboards_offline FALSE)
               (invited_user_pad -1)
               (set_webcode
                  ($message)
                  {set
                     [webcode]
                     $message}
                  {set
                     [webcode_done]
                     TRUE}
                  {if
                     {$this is_up}
                     {$this update_button_status}})
               (enter
                  {modifygame.btn set text_token "Mod Settings"}
                  {leaderboards clear_type}
                  {leaderboards set_offline FALSE}
                  {session clear}
                  {platform_mgr
                     add_sink
                     $this
                     (connection_status_changed)}
                  {server
                     add_sink
                     $this
                     (server_status_changed)}
                  {$this update_button_status}
                  {set
                     [ok_with_leaderboards_offline]
                     FALSE}
                  #ifndef HX_PS3
                  {$this disable webcode_ps3.btn}
                  {webcode_ps3.btn set_showing FALSE}
                  {$this disable checkinvites.btn}
                  {checkinvites.btn set_showing FALSE}
                  {$this disable managefriends.btn}
                  {managefriends.btn set_showing FALSE}
                  #endif)
               (exit
                  {platform_mgr remove_sink $this connection_status_changed}
                  {server remove_sink $this server_status_changed})
               (connection_status_changed
                  ($connected)
                  {$this update_button_status})
               (server_status_changed
                  ($connected)
                  {$this update_button_status})
               (is_webcode_done
                  {if_else
                     [webcode_done]
                     TRUE
                     FALSE})
               (update_button_status
                  {main_panel update_button_status})
               (SELECT_MSG
                  {switch
                     $component
                     (credits.btn
                        {helpbar
                           set_config
                           ((min_height 0))}
                        {ui goto_screen credits_movie_screen})
                     (modifygame.btn
                        {ui push_screen overshell_main_screen})
                     (leaderboards.btn
                        {cond
                           ([ok_with_leaderboards_offline]
                              {$this goto_leaderboards $player $player_num})
                           ({!
                                 {platform_mgr is_connected}}
                              {leaderboards set_offline TRUE}
                              {main_community_screen register_user_confirm $player}
                              {ui push_screen main_leaderboard_offline_screen})
                           ({!=
                                 {rock_central state}
                                 kRCOnline}
                              {leaderboards set_offline TRUE}
                              {main_community_screen register_user_confirm $player}
                              {ui push_screen main_leaderboard_offline_screen})
                           (TRUE
                              {$this goto_leaderboards $player $player_num})})
                     (webcode_ps3.btn
                        {if
                           [webcode_done]
                           {ui push_screen main_webcode_screen}})
                     #ifdef HX_PS3
                     (managefriends.btn
                        {platform_mgr show_friends -1})
                     (checkinvites.btn
                        {set
                           [invited_user_pad]
                           {$player get_pad_num}}
                        {platform_mgr check_mailbox})
                     #endif})
               (goto_leaderboards
                  ($player $player_num)
                  {gamemode set_mode community_leaderboards $player_num}
                  {gamemode set player_num $player_num}
                  {$this wait_for_session_ready}
                  {session_mgr add_local_user $player})
               (session_ready_complete_msg
                  ($player_num)
                  {if_else
                     {gamemode is_jukebox}
                     {do
                        {gamecfg auto_assign_missing_slots}
                        {do
                           ($pcfg
                              {game get_player_config $player_num})
                           ($num_bands
                              {{profile_mgr get_profile $player_num}
                                 num_bands})
                           {$pcfg
                              set_char
                              {available_prefab $player_num}}
                           {if_else
                              {> $num_bands 0}
                              {do
                                 {ui goto_screen jukebox_band_sel_screen}}
                              {do
                                 {jukebox_panel set_band -1}
                                 {ui goto_screen song_select_screen}}}}}
                     {do
                        {if
                           {==
                              {gamemode get player_num}
                              $player_num}
                           {input_mgr
                              set_user
                              {user_mgr get_band_user $player_num}}
                           {gamecfg auto_assign_missing_slots}
                           {if_else
                              {leaderboards get_offline}
                              {do
                                 {leaderboards_netwatcher_panel set return_screen main_community_screen}
                                 {main_panel update_leaderboard_buttons}
                                 {main_panel push_focus}
                                 {ui reset_screen main_leaderboard_screen}}
                              {do
                                 {leaderboards_netwatcher_panel set return_screen main_community_screen}
                                 {main_panel update_leaderboard_buttons}
                                 {main_panel push_focus}
                                 {goto_and_push_focus_after_network_connect main_leaderboard_screen FALSE}}}}}})}
            ; start of funcs
            {func
               pop_and_goto_screen
               ($gotoscreen)
               {if_else {exists $gotoscreen}
                  {do
                     {ui pop_screen}
                     {ui goto_screen $gotoscreen}
                  }
                  {passive_messages_panel queue_message {sprintf " %s doesn't exist!" $gotoscreen}}
               }
            }
            {func
               set_cnt_type
               ($cnt $instr)
               {set_elem {find $syscfg joypad instrument_mapping $cnt} 1 $instr}
            }
            {func
               set_cnt_mapping
               {set_elem {find $syscfg beatmatcher controller joypad slots} 1 $cnt_slot1}
               {set_elem {find $syscfg beatmatcher controller joypad slots} 3 $cnt_slot2}
               {set_elem {find $syscfg beatmatcher controller joypad slots} 5 $cnt_slot3}
               {set_elem {find $syscfg beatmatcher controller joypad slots} 7 $cnt_slot4}
               {set_elem {find $syscfg beatmatcher controller joypad slots} 9 $cnt_slot5}
               {set_elem {find $syscfg beatmatcher controller joypad force_mercury} 1 $cnt_star}
            }
            {func
               enable_second_kick_mapping
               #ifdef HX_XBOX
               {insert_elems {find $syscfg beatmatcher controller hx_drums_xbox slots} 1 (kPad_R1 0)}
               #endif
               #ifdef HX_PS3
               {insert_elems {find $syscfg beatmatcher controller hx_drums_ps3 slots} 1 (kPad_R1 0)}
               #endif
            }
            {func
               disable_second_kick_mapping
               #ifdef HX_XBOX
               {set_elem {find $syscfg beatmatcher controller hx_drums_xbox slots} 1 69}
               #endif
               #ifdef HX_PS3
               {set_elem {find $syscfg beatmatcher controller hx_drums_ps3 slots} 1 69}
               #endif
            }
            {func
               reset_fc_vars
               {set $guitar_milosong FALSE} {set $bass_milosong FALSE} {set $drum_milosong FALSE} {set $h2h_0_milosong FALSE} {set $h2h_1_milosong FALSE}
               {set $guitar_firstnote FALSE} {set $bass_firstnote FALSE} {set $drum_firstnote FALSE} {set $h2h_0_firstnote FALSE} {set $h2h_1_firstnote FALSE}
               {set $guitar_groove_active FALSE} {set $drum_groove_active FALSE} {set $h2h_0_groove_active FALSE} {set $h2h_1_groove_active FALSE}
            }
            {func
               force_inst_detection
               {set $padtar FALSE}
               {set $paddrum FALSE}
               {if_else $force_inst_detec
                  {switch $force_inst_detec
                     (guitar
                        {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerGuitar}
                        #ifdef HX_PS3
                        {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerGuitar}
                        {set_elem {find $syscfg joypad controller_mapping dualshock} 1 hx_guitar_ps3}
                        {set_elem {find $syscfg joypad controller_mapping analog} 1 hx_guitar_ps3}
                        #else
                        {set_elem {find $syscfg joypad controller_mapping analog} 1 ro_guitar_xbox}
                        #endif
                     )
                     #ifdef HX_PS3
                     (gh_guitar
                        {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerGuitar}
                        {set_elem {find $syscfg joypad controller_mapping dualshock} 1 ro_guitar_ps3}
                        {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerGuitar}
                        {set_elem {find $syscfg joypad controller_mapping analog} 1 ro_guitar_ps3}
                     )
                     #endif
                     (drum
                        {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerDrum}
                        #ifdef HX_PS3
                        {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerDrum}
                        {set_elem {find $syscfg joypad controller_mapping dualshock} 1 hx_drums_ps3}
                        {set_elem {find $syscfg joypad controller_mapping analog} 1 hx_drums_ps3}
                        #else
                        {set_elem {find $syscfg joypad controller_mapping analog} 1 hx_drums_xbox}
                        #endif
                     )
                  }
                  {do
                     #ifdef HX_PS3
                     {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerVocals}
                     {set_elem {find $syscfg joypad controller_mapping dualshock} 1 joypad}
                     #endif
                     {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerVocals}
                     {set_elem {find $syscfg joypad controller_mapping analog} 1 joypad}
                  }
               }
            }
            {func
               set_graphics
               {if $blackbg
                  {world_panel set_showing FALSE}
               }
               {$world iterate PostProc $p
                  {if {'||' {!= $emulatefps 24} {!= $prevfps $emulatefps}}
                     {$p set emulate_fps $emulatefps}
                  }
                  {set $prevfps $emulatefps}
                  {unless $scrnoise {$p set noise_intensity 0}}
                  {unless $mbblend
                     {$p set motion_blur_blend 0}
                     {$p set motion_blur_weight 0}
                  }
                  {unless $scrbloom {$p set bloom_intensity 0}}
               }
               {$world iterate WorldDir $wd
                  {$wd iterate BandCamShot $bcs
                     {unless $fxdof
                        {$bcs set use_depth_of_field FALSE}
                     }
                     {unless $camerashake
                        {foreach_int $i 0 {$bcs size (keyframes)}
                           {$bcs set (keyframes $i shake_noisefreq) {'*' {$bcs get (keyframes $i shake_noisefreq)} 0}}
                           {$bcs set (keyframes $i shake_noiseamp) {'*' {$bcs get (keyframes $i shake_noiseamp)} 0}}
                           {$bcs set (keyframes $i shake_maxangle x) {'*' {$bcs get (keyframes $i shake_maxangle x)} 0}}
                           {$bcs set (keyframes $i shake_maxangle y) {'*' {$bcs get (keyframes $i shake_maxangle y)} 0}}
                        }
                     }
                  }
               }
            }
            {func
               set_tp_vars
               {{{get_track_panel} loaded_dir} set view_time_easy {* {/ {if_else $syncdifspeeds 1.2 2.4} $trackspeed} $speedmod}} ;implement track speed modifier
               {{{get_track_panel} loaded_dir} set view_time_expert {* {/ 1.2 $trackspeed} $speedmod}}
            }
            {func
               set_song_speed
               {if {> $speedmod 1}
                  {beatmatch set_music_speed $speedmod}
               }
            }
            ; start of new screens/panels
            {new
               MultiSelectListPanel
               overshell_main_panel
               (file ui/practice/practice_sel_section.milo)
               (focus sel_section.lst)
               (enter
                  {sel_section.lst set_data ("Modifiers" "Speed Settings" "Graphics Settings" "Controller Settings")}
                  {title.lbl set text_token "Mod Settings"}
                  {set $overshell_up TRUE}
                  {set $cntmodifierpos 0})
               (SELECT_MSG
                  {switch {$component selected_sym}
                     ("Modifiers"
                        {pop_and_goto_screen overshell_modifier_screen}
                     )
                     ("Speed Settings"
                        {pop_and_goto_screen overshell_speed_screen}
                     )
                     ("Graphics Settings"
                        {pop_and_goto_screen overshell_graphics_screen}
                     )
                     ("Controller Settings"
                        {pop_and_goto_screen overshell_cnt_screen}
                     )
                  }
               )
               (BUTTON_DOWN_MSG
                  {if {== $action kAction_Cancel}
                     {ui pop_screen}
                     {set $overshell_up FALSE}
                  }
                  kDataUnhandled
               )
            }
            {new
               UIScreen
               overshell_main_screen
               (panels overshell_main_panel practice_lower3rd_panel)
               (focus overshell_main_panel)}

            {new
               MultiSelectListPanel
               overshell_modifier_panel
               (file ui/practice/practice_sel_section.milo)
               (focus sel_section.lst)
               (enter
                  {$this lst_reset}
                  {title.lbl set text_token "Modifiers"})
               (exit
                  {set $modifierpos 0})
               (SELECT_MSG
                  {switch {$component selected_sym}
                     (("Sync Dificulty Speeds: ON" "Sync Dificulty Speeds: OFF")
                        {set $syncdifspeeds {! $syncdifspeeds}}
                     )
                     (("Whammy Pitch Bending: ON" "Whammy Pitch Bending: OFF")
                        {set $whammypb {! $whammypb}}
                        {set_elem {find $syscfg beatmatcher watcher pitch_bend_range} 1 $whammypb}
                     )
                     (("Track Muting: ON" "Track Muting: OFF")
                        {set $trkmuting {! $trkmuting}}
                        {set_elem {find $syscfg beatmatcher audio mute_volume} 1 {if_else $trkmuting -96.0 -0.001}}

                     )
                     (("New Char Max Money: ON" "New Char Max Money: OFF")
                        {set $yourmonies {! $yourmonies}}
                        {set_elem {find $syscfg tour default_money} 1 999999999}
                     )
                     (("Show FC Ring: ON" "Show FC Ring: OFF")
                        {set $fcring {! $fcring}}
                     )
                     (("Legacy Bass Streak: ON" "Legacy Bass Streak: OFF")
                        {set $legacybass {! $legacybass}}
                     )
                     (("Auto Kick: ON" "Auto Kick: OFF")
                        {set $autokick {! $autokick}}
                        {modifier_mgr toggle_modifier_active mod_unlockall}
                     )
                     (("No Fail Mode: ON" "No Fail Mode: OFF")
                        {modifier_mgr toggle_modifier_active mod_nofail}
                     )
                     (("Breakneck Speed: ON" "Breakneck Speed: OFF")
                        {modifier_mgr toggle_modifier_active mod_doublespeed}
                     )
                     (("Select Venue Screen: ON" "Select Venue Screen: OFF")
                        {modifier_mgr toggle_modifier_active mod_choose_venue}
                     )
                     (("Performance Mode: ON" "Performance Mode: OFF")
                        {modifier_mgr toggle_modifier_active mod_nohud}
                     )
                     (("Unlock All Songs: ON" "Unlock All Songs: OFF")
                        {set $unlockall {! $unlockall}}
                        {set_elem {find $syscfg modes defaults unlock_song_initial_num} 1 {if_else $unlockall 1000 20}}
                     )
                     (("New Venues Only: ON" "New Venues Only: OFF")
                        {modifier_mgr toggle_modifier_active mod_newvenuesonly}
                     )
                     (("Stage Mode: ON" "Stage Mode: OFF")
                        {modifier_mgr toggle_modifier_active mod_demomode}
                     )
                     (("Awesomeness Detection: ON" "Awesomeness Detection: OFF")
                        {modifier_mgr toggle_modifier_active mod_awesome}
                     )
                  }
                  {$this lst_reset}
               )
               (lst_reset
                  {sel_section.lst set_data
                     (
                        {if_else $syncdifspeeds "Sync Dificulty Speeds: ON" "Sync Dificulty Speeds: OFF"}
                        {if_else $whammypb "Whammy Pitch Bending: ON" "Whammy Pitch Bending: OFF"}
                        {if_else $trkmuting "Track Muting: ON" "Track Muting: OFF"}
                        {if_else $legacybass "Legacy Bass Streak: ON" "Legacy Bass Streak: OFF"}
                        {if_else $fcring "Show FC Ring: ON" "Show FC Ring: OFF"}
                        {if_else $yourmonies "New Char Max Money: ON" "New Char Max Money: OFF"}
                        {if_else $autokick "Auto Kick: ON" "Auto Kick: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_nofail} "No Fail Mode: ON" "No Fail Mode: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_doublespeed} "Breakneck Speed: ON" "Breakneck Speed: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_choose_venue} "Select Venue Screen: ON" "Select Venue Screen: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_nohud} "Performance Mode: ON" "Performance Mode: OFF"}
                        {if_else $unlockall "Unlock All Songs: ON" "Unlock All Songs: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_newvenuesonly} "New Venues Only: ON" "New Venues Only: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_demomode} "Stage Mode: ON" "Stage Mode: OFF"}
                        {if_else {modifier_mgr is_modifier_active mod_awesome} "Awesomeness Detection: ON" "Awesomeness Detection: OFF"}
                     )
                  }
                  {if $modifierpos
                     {sel_section.lst set_selected $modifierpos}})
               (SCROLL_MSG
                  {set $modifierpos {sel_section.lst selected_pos}})
            }
            {new
               UIScreen
               overshell_modifier_screen
               (back overshell_main_screen)
               (panels overshell_modifier_panel practice_lower3rd_panel)
               (focus overshell_modifier_panel)}
            {new
               UIPanel
               overshell_speed_panel
               (file
                  "ui/options/options_audio.milo")
               (focus instruments.btn)
               (enter
                  {audio_options.lbl set text_token "Speed Settings"}
                  {$this set_slider_steps}
                  {$this hide_unused_sliders}
                  {$this update_btn_ints}
                  {$this update_all_sliders})
               (TRANSITION_COMPLETE_MSG
                  {$this
                     update_helpbar
                     {$this focus_name}}
                  kDataUnhandled)
               (FOCUS_MSG
                  {$this update_helpbar $new_focus})
               (SCROLL_SELECT_MSG
                  {$this set_speeds})
               (SCROLL_MSG
                  {$this set_speeds})
               (SELECT_MSG
                  {switch
                     $component
                     (instruments.btn
                        {instruments.sld store}
                        {$this set_focus instruments.sld})
                     (background_music.btn
                        {background.sld store}
                        {$this set_focus background.sld})
                     (vocal_track.btn
                        {vocal_track.sld store}
                        {$this set_focus vocal_track.sld})})
               (BUTTON_DOWN_MSG
                  {switch
                     {$this focus_name}
                     (instruments.sld
                        {switch
                           $action
                           (kAction_Confirm
                              {instruments.sld confirm}
                              {$this set_focus instruments.btn})
                           (kAction_Cancel
                              {instruments.sld undo $player}
                              {$this set_focus instruments.btn})
                           kDataUnhandled})
                     (background.sld
                        {switch
                           $action
                           (kAction_Confirm
                              {background.sld confirm}
                              {$this set_focus background_music.btn})
                           (kAction_Cancel
                              {background.sld undo $player}
                              {$this set_focus background_music.btn})
                           kDataUnhandled})
                     (vocal_track.sld
                        {switch
                           $action
                           (kAction_Confirm
                              {vocal_track.sld confirm}
                              {$this set_focus vocal_track.btn})
                           (kAction_Cancel
                              {vocal_track.sld undo $player}
                              {$this set_focus vocal_track.btn})
                           kDataUnhandled})
                     kDataUnhandled})
               (update_all_sliders
                  {$this
                     iterate
                     UISlider
                     $s
                     {$this update_sliders $s}})
               (update_sliders
                  ($component)
                  {switch
                     $component
                     (instruments.sld
                        {$component
                           set_current
                           {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}})
                     (background.sld
                        {$component
                           set_current
                           {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}})
                     (vocal_track.sld
                        {$component
                           set_current
                           {int {+ 0.5 {/ {+ {- $hwlength 1} 0.5} 0.05}}}})})
               (set_speeds
                  {set $trackspeed
                     {- {+ 1 {* {instruments.sld current} 0.05}} 0.5}}
                  {set $speedmod
                     {+ 1 {* {background.sld current} 0.05}}}
                  {set $hwlength
                     {- {+ 1 {* {vocal_track.sld current} 0.05}} 0.5}}
                  {$this update_btn_ints})
               (set_slider_steps
                  {instruments.sld set_num_steps 41}
                  {background.sld set_num_steps 31}
                  {vocal_track.sld set_num_steps 41})
               (hide_unused_sliders
                  {$this disable sfx.btn}
                  {$this disable crowd.btn}
                  {sfx.btn set_showing FALSE}
                  {crowd.btn set_showing FALSE}
                  {sfx.sld set_showing FALSE}
                  {crowd.sld set_showing FALSE})
               (update_btn_ints
                  {instruments.btn set text_token {sprintf "NOTE SPEED: %d%%" {int {+ 0.5 {* $trackspeed 100}}}}}
                  {background_music.btn set text_token {sprintf "SONG SPEED: %d%%" {int {+ 0.5 {* $speedmod 100}}}}}
                  {vocal_track.btn set text_token {sprintf "AWESOMENESS: %d%%" {int {+ 0.5 {* $hwlength 100}}}}})
               (update_helpbar
                  ($new_focus)
                  {switch
                     $new_focus
                     ((instruments.btn background_music.btn vocal_track.btn)
                        {helpbar
                           set_config
                           ((cancel helpbar_back)
                              (confirm helpbar_changesetting))})
                     ((instruments.sld background.sld vocal_track.sld)
                        {helpbar
                           set_config
                           ((cancel helpbar_cancel)
                              (confirm helpbar_confirmsetting))})})}
            {new
               UIScreen
               overshell_speed_screen
               (back overshell_main_screen)
               (panels options_background_panel overshell_speed_panel)
               (focus overshell_speed_panel)}
            {new
               MultiSelectListPanel
               overshell_graphics_panel
               (file ui/practice/practice_sel_section.milo)
               (focus sel_section.lst)
               (enter
                  {$this lst_reset}
                  {title.lbl set text_token "Graphics Settings"})
               (SELECT_MSG
                  {switch {$component selected_sym}
                     (("Bloom: ON" "Bloom: OFF")
                        {set $scrbloom {! $scrbloom}}
                     )
                     (("Film Grain: ON" "Film Grain: OFF")
                        {set $scrnoise {! $scrnoise}}
                     )
                     (("Camera Shake: ON" "Camera Shake: OFF")
                        {set $camerashake {! $camerashake}}
                     )
                     (("Motion Blur: ON" "Motion Blur: OFF")
                        {set $mbblend {! $mbblend}}
                     )
                     (("Depth of Field: ON" "Depth of Field: OFF")
                        {set $fxdof {! $fxdof}}
                     )
                     ("Venue FPS"
                        {pop_and_goto_screen overshell_venuefps_screen}
                     )
                     ("Vsync Rate"
                        {pop_and_goto_screen overshell_vsync_screen}
                     )
                     (("Disable Venues: ON" "Disable Venues: OFF")
                        {set $blackbg {! $blackbg}}
                     )
                  }
                  {$this lst_reset}
               )
               (lst_reset
                  {sel_section.lst set_data
                     (
                        "Venue FPS"
                        "Vsync Rate"
                        {if_else $blackbg "Disable Venues: ON" "Disable Venues: OFF"}
                        {if_else $fxdof "Depth of Field: ON" "Depth of Field: OFF"}
                        {if_else $scrnoise "Film Grain: ON" "Film Grain: OFF"}
                        {if_else $scrbloom "Bloom: ON" "Bloom: OFF"}
                        {if_else $camerashake "Camera Shake: ON" "Camera Shake: OFF"}
                        {if_else $mbblend "Motion Blur: ON" "Motion Blur: OFF"}
                     )
                  }
                  {if $gfxmodifierpos
                     {sel_section.lst set_selected $gfxmodifierpos}})
               (SCROLL_MSG
                  {set $gfxmodifierpos {sel_section.lst selected_pos}})}
            {new
               UIScreen
               overshell_graphics_screen
               (back overshell_main_screen)
               (panels overshell_graphics_panel practice_lower3rd_panel)
               (focus overshell_graphics_panel)}
            {new
               MultiSelectListPanel
               overshell_vsync_panel
               (file ui/practice/practice_sel_section.milo)
               (focus sel_section.lst)
               (enter
                  {sel_section.lst set_data (infinite full half quarter)}
                  {title.lbl set text_token "Vsync Rate"}
                  {sel_section.lst set_selected {switch $vsyncrate (0 0) (1 1) (2 2) (4 3)}})
               (SELECT_MSG
                  {switch {$component selected_sym}
                     (infinite
                        {set $vsyncrate 0}
                     )
                     (full
                        {set $vsyncrate 1}
                     )
                     (half
                        {set $vsyncrate 2}
                     )
                     (quarter
                        {set $vsyncrate 4}
                     )
                  }
                  {rnd set_sync $vsyncrate}
                  {pop_and_goto_screen overshell_graphics_screen}
               )}
            {new
               UIScreen
               overshell_vsync_screen
               (back overshell_graphics_screen)
               (panels overshell_vsync_panel practice_lower3rd_panel)
               (focus overshell_vsync_panel)}
            {new
               MultiSelectListPanel
               overshell_venuefps_panel
               (file ui/practice/practice_sel_section.milo)
               (focus sel_section.lst)
               (enter
                  {sel_section.lst set_data (60fps 30fps 24fps 15fps 12fps 6fps 1fps)}
                  {title.lbl set text_token "Venue FPS"}
                  {sel_section.lst set_selected {switch $emulatefps (60 0) (30 1) (24 2) (15 3) (12 4) (6 5) (1 6)}})
               (SELECT_MSG
                  {switch {$component selected_sym}
                     (60fps
                        {set $emulatefps 60}
                     )
                     (30fps
                        {set $emulatefps 30}
                     )
                     (24fps
                        {set $emulatefps 24}
                     )
                     (15fps
                        {set $emulatefps 15}
                     )
                     (12fps
                        {set $emulatefps 12}
                     )
                     (6fps
                        {set $emulatefps 6}
                     )
                     (1fps
                        {set $emulatefps 1}
                     )
                  }
                  {pop_and_goto_screen overshell_graphics_screen}
               )}
            {new
               UIScreen
               overshell_venuefps_screen
               (back overshell_graphics_screen)
               (panels overshell_venuefps_panel practice_lower3rd_panel)
               (focus overshell_venuefps_panel)}
         {new
            MultiSelectListPanel
            overshell_cnt_panel
            (file ui/practice/practice_sel_section.milo)
            (focus sel_section.lst)
            (enter
               {$this lst_reset}
               {title.lbl set text_token "Controller Settings"}
               {set $rcntmodifierpos 0})
            (SELECT_MSG
               {switch {$component selected_sym}
                  ("Remap Pad Controls"
                     {pop_and_goto_screen overshell_remap_cnt_screen}
                  )
                  ("Force Instrument Detection"
                     {pop_and_goto_screen overshell_force_inst_detec_screen}
                  )
                  (("Pad is Guitar: ON" "Pad is Guitar: OFF")
                     {set $padtar {! $padtar}}
                     {set $paddrum FALSE}
                     {set_cnt_type dualshock {if_else $padtar kControllerGuitar kControllerVocals}}
                     {set_cnt_type analog {if_else $padtar kControllerGuitar kControllerVocals}}
                  )
                  (("Pad is Drums: ON" "Pad is Drums: OFF")
                     {set $paddrum {! $paddrum}}
                     {set $padtar FALSE}
                     {set_cnt_type dualshock {if_else $paddrum kControllerDrum kControllerVocals}}
                     {set_cnt_type analog {if_else $paddrum kControllerDrum kControllerVocals}}
                  )
                  (("Second Kick Mapping: ON" "Second Kick Mapping: OFF")
                     {set $secondkick {! $secondkick}}
                     {if_else $secondkick
                        {enable_second_kick_mapping}
                        {disable_second_kick_mapping}
                     }
                  )
               }
               {$this lst_reset}
            )
            (lst_reset
               {sel_section.lst set_data
                  (
                     "Remap Pad Controls"
                     "Force Instrument Detection"
                     {if_else $padtar "Pad is Guitar: ON" "Pad is Guitar: OFF"}
                     {if_else $paddrum "Pad is Drums: ON" "Pad is Drums: OFF"}
                     {if_else $secondkick "Second Kick Mapping: ON" "Second Kick Mapping: OFF"}
                  )
               }
               {if $cntmodifierpos
                  {sel_section.lst set_selected $cntmodifierpos}})
            (SCROLL_MSG
               {set $cntmodifierpos {sel_section.lst selected_pos}})}
         {new
            UIScreen
            overshell_cnt_screen
            (back overshell_main_screen)
            (panels overshell_cnt_panel practice_lower3rd_panel)
            (focus overshell_cnt_panel)}
         {new
            MultiSelectListPanel
            overshell_remap_cnt_panel
            (file ui/practice/practice_sel_section.milo)
            (focus sel_section.lst)
            (enter
               {sel_section.lst set_data ("Reset" "Slot 1" "Slot 2" "Slot 3" "Slot 4" "Slot 5" "Overdrive")}
               {if $rcntmodifierpos
                  {sel_section.lst set_selected $rcntmodifierpos}}
               {title.lbl set text_token "Remap Pad Controls"})
            (exit
               {set_cnt_mapping})
            (SELECT_MSG
               {set $os_sym {$component selected_sym}}
               {switch {$component selected_sym}
                  ("Reset"
                     {set $cnt_slot1 kPad_L2}
                     {set $cnt_slot2 kPad_L1}
                     {set $cnt_slot3 kPad_R1}
                     {set $cnt_slot4 kPad_R2}
                     {set $cnt_slot5 kPad_X}
                     {set $cnt_star kPad_Select}
                  )
                  ("Slot 1"
                     {set $remap_slot_num 1}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
                  ("Slot 2"
                     {set $remap_slot_num 2}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
                  ("Slot 3"
                     {set $remap_slot_num 3}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
                  ("Slot 4"
                     {set $remap_slot_num 4}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
                  ("Slot 5"
                     {set $remap_slot_num 5}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
                  ("Overdrive"
                     {set $remap_slot_num 6}
                     {pop_and_goto_screen overshell_cnt_slot_screen}
                  )
               }
            )
            (SCROLL_MSG
               {set $rcntmodifierpos {sel_section.lst selected_pos}})}
         {new
            UIScreen
            overshell_remap_cnt_screen
            (back overshell_cnt_screen)
            (panels overshell_remap_cnt_panel practice_lower3rd_panel)
            (focus overshell_remap_cnt_panel)}
         ;
         {new
            MultiSelectListPanel
            overshell_cnt_slot_panel
            (file ui/practice/practice_sel_section.milo)
            (focus sel_section.lst)
            (enter
               {sel_section.lst set_data ("LT" "LB" "RB" "RT" "A" "B" "X" "Y" "Up" "Down" "Left" "Right" "LS" "RS" "Back")}
               {title.lbl set text_token $os_sym})
            (SELECT_MSG
               {set $cnt_sel
                  {switch {$component selected_sym}
                     ("LT"
                        kPad_L2
                     )
                     ("LB"
                        kPad_L1
                     )
                     ("RB"
                        kPad_R1
                     )
                     ("RT"
                        kPad_R2
                     )
                     ("A"
                        kPad_X
                     )
                     ("B"
                        kPad_Circle
                     )
                     ("X"
                        kPad_Square
                     )
                     ("Y"
                        kPad_Tri
                     )
                     ("Up"
                        kPad_DUp
                     )
                     ("Down"
                        kPad_DDown
                     )
                     ("Left"
                        kPad_DLeft
                     )
                     ("Right"
                        kPad_DRight
                     )
                     ("LS"
                        kPad_L3
                     )
                     ("RS"
                        kPad_R3
                     )
                     ( "Back"
                        kPad_Select
                     )
                  }
               }
               {switch $remap_slot_num
                  (1 {set $cnt_slot1 $cnt_sel})
                  (2 {set $cnt_slot2 $cnt_sel})
                  (3 {set $cnt_slot3 $cnt_sel})
                  (4 {set $cnt_slot4 $cnt_sel})
                  (5 {set $cnt_slot5 $cnt_sel})
                  (6 {set $cnt_star $cnt_sel})
               }
               {pop_and_goto_screen overshell_remap_cnt_screen}
            )}
         {new
            UIScreen
            overshell_cnt_slot_screen
            (back overshell_remap_cnt_screen)
            (panels overshell_cnt_slot_panel practice_lower3rd_panel)
            (focus overshell_cnt_slot_panel)}
         ;
         ;
         {new
            MultiSelectListPanel
            overshell_force_inst_detec_panel
            (file ui/practice/practice_sel_section.milo)
            (focus sel_section.lst)
            (enter
               {sel_section.lst set_data (off guitar drum)}
               {title.lbl set text_token "Force Instrument Detection"})
            (SELECT_MSG
               {switch {$component selected_sym}
                  (off
                     {set $force_inst_detec FALSE}
                     {force_inst_detection}
                  )
                  (guitar
                     {set $force_inst_detec guitar}
                     {force_inst_detection}
                  )
                  (drum
                     {set $force_inst_detec drum}
                     {force_inst_detection}
                  )
               }
               {pop_and_goto_screen overshell_cnt_screen}
            )}
         {new
            UIScreen
            overshell_force_inst_detec_screen
            (back overshell_cnt_screen)
            (panels overshell_force_inst_detec_panel practice_lower3rd_panel)
            (focus overshell_force_inst_detec_panel)}
         {set $patched TRUE}
         {passive_messages_panel queue_message " CON Patch by Synchrony loaded successfully!"}
         {passive_messages_panel queue_message " Mod settings can be adjusted in extras"}
         #ifdef HX_XBOX
         {passive_messages_panel queue_message " Having a song cache WILL cause FREEZING/CRASHES"}
         #endif
      }
         TRUE
      }
   )
   (game_origin rb1_dlc)
   (song_id 69420)
   (rating 1)
   (short_version 121562)
   (song_length 247272)
   (extra_authoring lego)
   (album_art TRUE)
   (year_released 2003)
   (album_name "Results May Vary")
   (album_track_number 7)
   (base_points 476817)
)